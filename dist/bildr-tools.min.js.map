{"version":3,"file":"bildr-tools.min.js","mappings":"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","sources":["webpack://BildrTools/webpack/bootstrap","webpack://BildrTools/webpack/runtime/define property getters","webpack://BildrTools/webpack/runtime/hasOwnProperty shorthand","webpack://BildrTools/webpack/runtime/make namespace object","webpack://BildrTools/./src/Helpers.ts","webpack://BildrTools/./src/Actions.ts","webpack://BildrTools/./src/ActionTypes.ts","webpack://BildrTools/./src/Debug.ts","webpack://BildrTools/./src/Flows.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const groupBy = <T, K extends keyof any>(list: T[], getKey: (item: T) => K) =>\r\n    list.reduce((previous, currentItem) => {\r\n        const group = getKey(currentItem);\r\n        if (!previous[group]) previous[group] = [];\r\n        previous[group].push(currentItem);\r\n        return previous;\r\n    }, {} as Record<K, T[]>);\r\n\r\nexport const nameSort = <T extends { name: string }>(list: Array<T>) => {\r\n    return list.sort((a, b) => { return ('' + a.name).localeCompare(b.name) });\r\n}\r\n\r\nexport const ConsoleLog = (text: string, logIt: boolean = true): boolean => {\r\n    if (logIt) console.log(text);\r\n    return false;\r\n};\r\n\r\nclass CacheItem {\r\n    name: string;\r\n    exec: Function;\r\n    value: any;\r\n    nullDefault: any;\r\n\r\n    public constructor(name: string, execFn: Function, initValue: any) {\r\n        this.name = name;\r\n        this.exec = execFn;\r\n        this.nullDefault = initValue;\r\n        this.clear();\r\n    }\r\n\r\n    clear(): void {\r\n        this.value == null;\r\n    }\r\n\r\n    getValue<T>() {\r\n        if (this.value == null) {\r\n            this.value = this.exec() as T;\r\n        }\r\n        return this.value ? this.value as T : this.nullDefault as T;\r\n    }\r\n}\r\nexport class CacheHelper {\r\n    cache: CacheItem[] = [];\r\n\r\n    public register<T>(variableName: string, execFn: () => T, initValue: T) {\r\n        if (this.cache.find(item => item.name == variableName)) {\r\n            throw new Error(`VariableName '${variableName}' already registered.`);\r\n        }\r\n        this.cache.push(new CacheItem(variableName, execFn, initValue));\r\n    }\r\n\r\n    public getValue<T>(variableName: string) {\r\n        let cacheItem = this.cache.find(item => item.name == variableName);\r\n        if (cacheItem) {\r\n            return cacheItem.getValue<T>();\r\n        }\r\n        throw new Error(`VariableName '${variableName}' is not registered.`);\r\n    }\r\n\r\n    public clear() {\r\n        this.cache.forEach(item => item.clear())\r\n    }\r\n}\r\n\r\nexport class BildrCacheHelper {\r\n    static createInstance = () => { return new BildrCacheHelper(true) };\r\n    static bildrDBCacheGet = (...args:any[]): BildrDBCache => {return BildrDBCacheGet(args[0],args[1],args[2],args[3])} \r\n\r\n    bildrCache: BildrDBCache;\r\n    cache: CacheHelper;\r\n\r\n    public constructor(forSelectedBildr: boolean);\r\n    public constructor(projectID: string, revisionID: string);\r\n    public constructor(...myarray: any[]) {\r\n        if (myarray.length === 1) {\r\n            this.bildrCache = BildrCacheHelper.bildrDBCacheGet(myarray[0], \"\", \"\", null)!;\r\n        } else if (myarray.length === 2) {\r\n            this.bildrCache = BildrCacheHelper.bildrDBCacheGet(false, myarray[0], myarray[1], null)!;\r\n        } else {\r\n            this.bildrCache = BildrCacheHelper.bildrDBCacheGet(true, \"\", \"\", null)!;\r\n        }\r\n\r\n        this.cache = new CacheHelper()\r\n        this.cache.register(\"actionsGroupedByFormID\",\r\n            () => groupBy<ActionHelper, string>(this.actions, act => act.formID),\r\n            groupBy<ActionHelper, string>([], () => \"\"));\r\n\r\n        this.cache.register(\"actions\",\r\n            () => this.bildrCache.actions.recs.map(act => new ActionHelper(act, this)),\r\n            Array<ActionHelper>());\r\n\r\n        this.cache.register(\"flows\",\r\n            () => this.actions.filter(action => action.type == \"68\").map(flw => new FlowHelper(flw, this)),\r\n            Array<FlowHelper>());\r\n\r\n        this.cache.register(\"elements\",\r\n            () => this.bildrCache.elements.recs,\r\n            Array<element>());\r\n\r\n        this.cache.register(\"pages\",\r\n            () => this.bildrCache.forms.recs.map(frm => new PageHelper(frm, this)),\r\n            Array<PageHelper>());\r\n\r\n        this.cache.register(\"actionTypes\",\r\n            () => this.bildrCache.actionsTypes.recs,\r\n            Array<actionType>());\r\n\r\n        this.cache.register(\"activePages\",\r\n            () => this.pages.filter(item => item.deleted == 0 && item.opts.archived != true),\r\n            Array<PageHelper>());\r\n\r\n        this.cache.register(\"activeFlows\",\r\n            () => this.flows.filter(flow => flow.deleted == 0),\r\n            Array<FlowHelper>());\r\n\r\n        this.cache.register(\"deletedFlows\",\r\n            () => this.flows.filter(flow => flow.deleted != 0),\r\n            Array<FlowHelper>());\r\n\r\n        this.cache.register(\"activeFlowsGroupedByFormID\",\r\n            () => groupBy<FlowHelper, string>(this.activeFlows, f => f.formID),\r\n            groupBy<FlowHelper, string>([], () => \"\"));\r\n\r\n        this.cache.register(\"activeElements\",\r\n            () => this.elements.filter(item => item.deleted == 0),\r\n            Array<element>());\r\n\r\n    }\r\n    get actions() {\r\n        return this.cache.getValue<ActionHelper[]>(\"actions\")\r\n    }\r\n    get flows() {\r\n        return this.cache.getValue<FlowHelper[]>(\"flows\")\r\n    }\r\n    get elements() {\r\n        return this.cache.getValue<element[]>(\"elements\")\r\n    }\r\n    get pages() {\r\n        return this.cache.getValue<PageHelper[]>(\"pages\")\r\n    }\r\n    get actionTypes() {\r\n        return this.cache.getValue<actionType[]>(\"actionTypes\")\r\n    }\r\n    get activePages() {\r\n        return this.cache.getValue<PageHelper[]>(\"activePages\")\r\n    }\r\n    get activeFlows() {\r\n        return this.cache.getValue<FlowHelper[]>(\"activeFlows\")\r\n    }\r\n    get deletedFlows() {\r\n        return this.cache.getValue<FlowHelper[]>(\"deletedFlows\")\r\n    }\r\n    get activeFlowsGroupedByFormID() {\r\n        return this.cache.getValue<Record<string, FlowHelper[]>>(\"activeFlowsGroupedByFormID\")\r\n    }\r\n    get actionsGroupedByFormID() {\r\n        return this.cache.getValue<Record<string, ActionHelper[]>>(\"actionsGroupedByFormID\");\r\n    }\r\n    get activeElements() {\r\n        return this.cache.getValue<element[]>(\"activeElements\")\r\n    }\r\n}\r\n\r\nexport class PageHelper implements form {\r\n    opts: formOpts;\r\n    objsTree?: element[] | undefined;\r\n    actions: action[];\r\n    deleted: number | undefined;\r\n    name: string;\r\n    id: string | number;\r\n\r\n    protected bildrCache: BildrCacheHelper;\r\n\r\n    public constructor(form: form, bildrCache: BildrCacheHelper) {\r\n        this.opts = form.opts;\r\n        this.objsTree = form.objsTree;\r\n        this.actions = form.actions;\r\n        this.deleted = form.deleted;\r\n        this.name = form.name;\r\n        this.id = form.id\r\n        this.bildrCache = bildrCache;\r\n    }\r\n\r\n    public get ActiveFlows() {\r\n        let flows = this.bildrCache.activeFlowsGroupedByFormID[this.id.toString()];\r\n        return flows ? flows : Array<FlowHelper>();\r\n    }\r\n\r\n    public get ActiveElements() {\r\n        let formObjsTreeFlattend = Array<element>();\r\n\r\n        function flattenElements(items: element[] | undefined) {\r\n            if (items != undefined) {\r\n                items.forEach(item => {\r\n                    flattenElements(item.items);\r\n                    formObjsTreeFlattend.push(item);\r\n                });\r\n            }\r\n        }\r\n        flattenElements(this.objsTree);\r\n\r\n        return formObjsTreeFlattend;\r\n    }\r\n}\r\n\r\nexport class ActionHelper implements action {\r\n    opts: { arguments: actionArgument[]; };\r\n    formID: string;\r\n    type: string;\r\n    deleted: number | undefined;\r\n    name: string;\r\n    id: string | number;\r\n\r\n    protected bildrCache: BildrCacheHelper;\r\n    private page: PageHelper | undefined;\r\n\r\n    public constructor(action: action, bildrCache: BildrCacheHelper) {\r\n        this.opts = action.opts;\r\n        this.formID = action.formID;\r\n        this.type = action.type;\r\n        this.deleted = action.deleted;\r\n        this.name = action.name;\r\n        this.id = action.id\r\n        this.bildrCache = bildrCache;\r\n    }\r\n    public get Page() {\r\n        if (!this.page) { this.page = this.bildrCache.pages.find(item => item.id == this.formID); }\r\n        return this.page;\r\n    }\r\n    public get Arguments() {\r\n        //check nodig? Array.isArray(action.Arguments\r\n        return this.opts.arguments\r\n    }\r\n\r\n}\r\n\r\nexport class FlowHelper extends ActionHelper {\r\n    public constructor(action: action, bildrCache: BildrCacheHelper) {\r\n        super(action, bildrCache);\r\n    }\r\n\r\n    public get Actions() {\r\n        let actionsArray = this.opts.arguments.find(item => item.name == \"actionsArray\");\r\n        let retValue = Array<ActionHelper>();\r\n\r\n        if (!actionsArray) return retValue;\r\n\r\n        let actArgActionsArray = actionsArray as actionArgumentActionsArray;\r\n\r\n        if (!actArgActionsArray.value) return retValue;\r\n\r\n        actArgActionsArray.value.forEach(actRef => {\r\n            let act = this.bildrCache.actionsGroupedByFormID[this.formID].find(act => act.id == actRef.id)\r\n            if (act) { retValue.push(act) }\r\n        });\r\n        return retValue;\r\n    }\r\n}","import { ActionHelper, BildrCacheHelper, ConsoleLog, FlowHelper, nameSort, PageHelper } from \"./Helpers\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BildrToolsActions {\r\n    /**\r\n     * Search in the actions for use of path on Variables and Elements\r\n     * \r\n     * @param path - any string text. Use * to list all actions that have a path\r\n     * @param exactMatch - should it match exactly. default = false\r\n     */\r\n    static findInPath(path: string, exactMatch: boolean = false): void {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        path = path.trim();\r\n\r\n        // setup the matcher\r\n        let matcher = (value: string) => value.includes(path);\r\n        if (exactMatch) {\r\n            matcher = (value: string) => value == path;\r\n        }\r\n        if (path == \"*\") {\r\n            matcher = (value: string) => value.length > 0;\r\n        }\r\n\r\n        // Create \"Header\" for the results\r\n        ConsoleLog(`Path ${path} with exact match = ${exactMatch} is called by:`);\r\n        ConsoleLog(\"\");\r\n\r\n        // check flow usage per active page\r\n        bildrCache.activePages.forEach(page => {\r\n            let logPageName = true;\r\n\r\n            // Check usage of Flow in Actions of Flows as nested flow or referenced by an action type argument       \r\n            nameSort(page.ActiveFlows).forEach(flow => {\r\n                let logFlowName = true;\r\n                flow.Actions.forEach(action => {\r\n                    action.Arguments.forEach(arg => {\r\n                        // check usage path on variable or element argument\r\n                        checkVariableOrElementPathUsage(arg);\r\n\r\n                        // Check usage of path in Data Collection filters\r\n                        if (arg.argumentType == \"filterset\") {\r\n                            let argFilterset = arg as actionArgumentFilterset;\r\n                            argFilterset.filters?.forEach(filter => {\r\n                                filter.fieldsToFilterArray.forEach(field => {\r\n                                    field.valueToFilterWith.forEach(value => {\r\n                                        checkVariableOrElementPathUsage(value)\r\n                                    })\r\n                                })\r\n                            });\r\n                        }\r\n\r\n                        function checkVariableOrElementPathUsage(arg: actionArgument): void {\r\n                            if (arg.argumentType == \"variable\") {\r\n                                let argVariable = arg as actionArgumentVariable;\r\n                                // \"value\": \"vars.Test.name.reverseString()\",\r\n                                // strip vars.Test. to have the whole path\r\n                                // value contains the combination of variablename and path\r\n                                // since there is no actual need to use path separately in\r\n                                // the Bildr UI (can also be add the the variablename field)\r\n                                let path = argVariable.value;\r\n                                if (!path || path.length < 5) return;\r\n\r\n                                let stripTill = path.indexOf(\".\", 5)\r\n                                if (stripTill < 0) return;\r\n\r\n                                path = path.slice(stripTill + 1);\r\n\r\n                                if (matcher(path)) {\r\n                                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                                    logFlowName = ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logFlowName);\r\n                                    ConsoleLog(\"    Action : \" + action.name);\r\n                                    if (path == \"*\" || exactMatch == false)\r\n                                        ConsoleLog(\"      Path : \" + path);\r\n                                }\r\n                            }\r\n                            if (arg.argumentType == \"element\") {\r\n                                let argVariable = arg as actionArgumentElement;\r\n                                if (argVariable.path && matcher(argVariable.path)) {\r\n                                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                                    logFlowName = ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logFlowName);\r\n                                    ConsoleLog(\"    Action : \" + action.name);\r\n                                    if (path == \"*\" || exactMatch == false)\r\n                                        ConsoleLog(\"      Path : \" + argVariable.path);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        })\r\n        ConsoleLog(\"\");\r\n        ConsoleLog(\"THAT'S IT!\");\r\n    }\r\n    /**\r\n     * Find where variable(s) are used\r\n     * \r\n     * @param variableName - The (partial) name of the variable. Use * to show all variable ussage\r\n     * @param setValue - Show where the variable gets set\r\n     * @param readValue - Show where the variable is read\r\n     * @param exactMatch - Default true, if partial search is required set it to false\r\n     */\r\n    static findVariable(variableName: string, setValue: boolean = true, readValue: boolean = true, exactMatch: boolean = true): void {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        variableName = variableName.trim();\r\n\r\n        // setup the matcher\r\n        let matcher = (value: string) => { return value.includes(variableName) };\r\n        if (exactMatch) {\r\n            matcher = (value: string) => value == variableName;\r\n        }\r\n        if (variableName == \"*\") {\r\n            matcher = (value: string) => true;\r\n        }\r\n\r\n        let ConsoleLog = (text: string, logIt: boolean = true): boolean => {\r\n            if (logIt) console.log(text);\r\n            return true;\r\n        };\r\n\r\n        // Create \"Header\" for the results\r\n        ConsoleLog(`Variable ${variableName} with exact match = ${exactMatch} is used here:`);\r\n        ConsoleLog(\"\");\r\n\r\n        // check flow usage per active page\r\n        bildrCache.activePages.forEach(page => {\r\n            let logPageName = true;\r\n            // Check usage of Flow in Actions of Flows as nested flow or referenced by an action type argument       \r\n            nameSort(page.ActiveFlows).forEach(flow => {\r\n                let logFlowName = true;\r\n                flow.Actions.forEach(action => {\r\n                    action.Arguments.forEach(arg => {\r\n                        if (setValue && arg.argumentType == \"static.text\" && arg.thisIsAVariableName == true) {\r\n                            let argVariable = arg as actionArgumentStaticText;\r\n                            if (argVariable.value && matcher(argVariable.value)) {\r\n                                logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                                logFlowName = ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logFlowName);\r\n                                ConsoleLog(\"    Set in Action : \" + action.name);\r\n                                if (variableName == \"*\") ConsoleLog(\"      Variable : \" + argVariable.value);\r\n                            }\r\n                        }\r\n\r\n                        if (readValue) {\r\n                            ({ pageNameLogged: logPageName, flowNameLogged: logFlowName } = handleArgVariable(arg, action, logPageName, page, logFlowName, flow));\r\n                        }\r\n\r\n                        // Check usage of variable in Data Collection filters\r\n                        if (readValue && arg.argumentType == \"filterset\") {\r\n                            let argFilterset = arg as actionArgumentFilterset;\r\n                            argFilterset.filters?.forEach(filter => {\r\n                                filter.fieldsToFilterArray.forEach(field => {\r\n                                    field.valueToFilterWith.forEach(value => {\r\n                                        ({ pageNameLogged: logPageName, flowNameLogged: logFlowName } = handleArgVariable(value, action, logPageName, page, logFlowName, flow));\r\n                                    })\r\n                                })\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        })\r\n        ConsoleLog(\"\");\r\n        ConsoleLog(\"THAT'S IT!\");\r\n\r\n        function handleArgVariable(arg: actionArgument, action: ActionHelper, pageNameLogged: boolean, page: PageHelper, flowNameLogged: boolean, flow: FlowHelper) {\r\n            if (arg.argumentType == \"variable\") {\r\n                let argVariable = arg as actionArgumentVariable;\r\n                if (argVariable.variableName && matcher(argVariable.variableName)) {\r\n\r\n                    pageNameLogged = ConsoleLog(\"Page : \" + page.name, pageNameLogged);\r\n                    flowNameLogged = ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, flowNameLogged);\r\n                    ConsoleLog(\"    Used in Action : \" + action.name);\r\n                    if (variableName == \"*\") ConsoleLog(\"      Variable : \" + argVariable.variableName);\r\n                }\r\n            }\r\n            return { pageNameLogged, flowNameLogged };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { BildrCacheHelper, ConsoleLog, nameSort } from \"./Helpers\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BildrToolsActionTypes {\r\n    static findUsage(actionTypeId: string): void {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        let logToConsole = true;\r\n\r\n        // Create \"Header\" for the results\r\n        let theActionType = bildrCache.actionTypes.find(acT => { return (acT.id == actionTypeId); });\r\n        // found it\r\n        if (theActionType) {\r\n            ConsoleLog(`Action Type \"${theActionType.name}\" is called by:`);\r\n            ConsoleLog(\"\");\r\n        } else {\r\n            ConsoleLog(`Couldn't find Action Type ${actionTypeId} in project!`);\r\n            return;\r\n        }\r\n\r\n        // check flow usage per active page\r\n        bildrCache.activePages.forEach(page => {\r\n            let logPageName = true;\r\n\r\n            // Check usage of Flow in Actions of Flows as nested flow or referenced by an action type argument       \r\n            nameSort(page.ActiveFlows).forEach(flow => {\r\n                flow.Actions.forEach(action => {\r\n                    let logFlowName = true\r\n                    if (action.type == actionTypeId) {\r\n                        logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                        logFlowName = ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logFlowName);\r\n                        ConsoleLog(\"    Action : \" + action.name);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        ConsoleLog(\"\");\r\n        ConsoleLog(\"THAT'S IT!\");\r\n    }\r\n}\r\n\r\n\r\n","import { BildrCacheHelper } from \"./Helpers\";\r\n\r\n// Stubs which will not be part of the output javascript\r\ndeclare var window: {\r\n    orgQAFunc: typeof QueueAction,\r\n    QueueAction: typeof QueueAction\r\n}\r\n\r\n\r\n/**\r\n * If you want both Flows and actions use: Flows | Actions\r\n * @public\r\n */\r\nexport enum ActionsToShowEnum {\r\n    Flows = 1 << 0,\r\n    Actions = 1 << 1,\r\n    BildrActions = 1 << 2,\r\n    MouseActions = 1 << 3,\r\n};\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BildrToolsDebug {\r\n    private static _StepMode: boolean = false;\r\n\r\n    static ActionsToShow: ActionsToShowEnum = ActionsToShowEnum.Flows;\r\n\r\n    static ShowAllVariables(): void {\r\n\r\n        function frmsRecursive(brwFrm: brwForm) {\r\n            if (brwFrm && brwFrm.form && brwFrm.form.name) {\r\n                console.log(`Variables of Page: ${brwFrm.form.name}`);\r\n            }\r\n            let brwFrmVars = brwFrm._vars;\r\n            if (brwFrmVars) {\r\n                console.log(brwFrmVars);\r\n                if (brwFrm.cBrwForms) {\r\n                    brwFrm.cBrwForms.forEach(frm => {\r\n                        frmsRecursive(frm);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        frmsRecursive(brwFormRoot);\r\n    }\r\n\r\n    static Start(): void\r\n    static Start(breakBeforActionId?: actId): void {\r\n        if (!window.orgQAFunc) { window.orgQAFunc = QueueAction; }\r\n\r\n        window.QueueAction = function (a: action, wait: boolean, parentQAction: any, brwObj: any, params: any, isThread: boolean, qName: string, bildrCache: BildrDBCache, addToQueue: boolean) {\r\n            let showFlows = (BildrToolsDebug.ActionsToShow & ActionsToShowEnum.Flows) === ActionsToShowEnum.Flows;\r\n            let showActions = (BildrToolsDebug.ActionsToShow & ActionsToShowEnum.Actions) === ActionsToShowEnum.Actions;\r\n            let showBildrActions = (BildrToolsDebug.ActionsToShow & ActionsToShowEnum.BildrActions) === ActionsToShowEnum.BildrActions;\r\n            let showMouseActions = (BildrToolsDebug.ActionsToShow & ActionsToShowEnum.MouseActions) === ActionsToShowEnum.MouseActions;\r\n\r\n            if (a) {\r\n                // V3gKt5FZRECIDMudjBbi3g = Action - Mouseenter - Element\r\n                // AGTUwIokUuQgXEgNW6mnA = Action - Mouse Leave Page\r\n                // CAGTUwIokUuQgXEgNW6mnA = Action - Mouse Leave Page\r\n                let isMouseEvent = (a.id == \"V3gKt5FZRECIDMudjBbi3g\" || a.id == \"AGTUwIokUuQgXEgNW6mnA\" || a.id == \"CAGTUwIokUuQgXEgNW6mnA\")\r\n                let isFlow = (a.type == \"68\");\r\n\r\n                // Show only flows\r\n                if ((isMouseEvent && showMouseActions) || (isFlow && showFlows) || (!isMouseEvent && !isFlow && showActions)) {\r\n                    // is it a project action?\r\n                    let act = undefined;\r\n                    if (a.id && !showBildrActions) {\r\n                        let cache = BildrCacheHelper.createInstance();\r\n                        act = cache.actions.find(act => { return act.id == a.id })\r\n                    }\r\n\r\n                    if (act != undefined || showBildrActions) {\r\n                        let type = isFlow ? \"Flow  \" : \"Action\";\r\n                        let indent = isFlow ? \"\" : \"  --\";\r\n                        console.log(`${type}: ${a.id} ${indent}  \"${a.name}\"`);\r\n\r\n                        if (BildrToolsDebug._StepMode || (breakBeforActionId && a.id == breakBeforActionId)) {\r\n                            BildrToolsDebug._StepMode = true;\r\n                            debugger;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            window.orgQAFunc.call(this, a, wait, parentQAction, brwObj, params, isThread, qName, bildrCache, addToQueue);\r\n        }\r\n        window.QueueAction.prototype = window.orgQAFunc.prototype;\r\n        window.QueueAction.prototype.constructor = QueueAction;\r\n    }\r\n\r\n    static Stop(): void {\r\n        if (window.orgQAFunc) { window.QueueAction = window.orgQAFunc; }\r\n    }\r\n\r\n    static StepModeOff(): void {\r\n        BildrToolsDebug._StepMode = false;\r\n    }\r\n}","import { BildrCacheHelper, ConsoleLog, nameSort } from \"./Helpers\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BildrToolsFlows {\r\n\r\n    static findUnusedFlows(skipAutoSave = true): void {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        const activePages = nameSort(bildrCache.activePages);\r\n\r\n        // create \"header\" for the results\r\n        console.log(`Checking ${bildrCache.activeFlows.length} flows.`);\r\n        console.log(\"You'll see 'That's it!' when checking is finished.\");\r\n        console.log(\"\");\r\n        if (skipAutoSave) {\r\n            console.log(\"Looking for Unused flows (skipping unused 'Auto Save')\");\r\n        } else {\r\n            console.log(\"Looking for All unused flows\");\r\n        }\r\n        console.log(\"\");\r\n\r\n        activePages.forEach(page => {\r\n            let logPageName = true;\r\n            nameSort(page.ActiveFlows).forEach(flow => {\r\n                if (skipAutoSave && flow.name.includes(\"Auto Save\")) { return; }\r\n\r\n                if (BildrToolsFlows.findUsageOfFlow(flow.id, false) == false) {\r\n                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                    console.log(\"  Flow : \" + flow.name);\r\n                }\r\n            });\r\n        });\r\n        console.log(\"\");\r\n        console.log(\"THAT'S IT!\");\r\n    }\r\n\r\n    static findUsageOfFlow(flowId: string | number, logToConsole: boolean = true): boolean {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        const strFlowId = flowId.toString();\r\n\r\n        // for easy reference\r\n        let isUsed = false;\r\n\r\n        // Create \"Header\" for the results\r\n        let flow = bildrCache.activeFlows.find(flow => { return (flow.id == flowId); });\r\n        // found it\r\n        if (flow) {\r\n            if (flow.Page) {\r\n                ConsoleLog(`Flow \"${flow.name}\" on page \"${flow.Page.name}\" is called by:`, logToConsole);\r\n            } else {\r\n                ConsoleLog(`Couldn't find page for flowID ${flowId} in project!`, logToConsole)\r\n            }\r\n            ConsoleLog(\"\", logToConsole);\r\n        } else {\r\n            ConsoleLog(`Couldn't find flowID ${flowId} in project!`, logToConsole);\r\n            return false;\r\n        }\r\n\r\n        // check flow usage per active page\r\n        bildrCache.activePages.forEach(page => {\r\n            let logPageName = logToConsole;\r\n            // Check usage of Flow in Actions of page.Flows         \r\n            nameSort(page.ActiveFlows).forEach(flow => {\r\n                flow.Actions.forEach(action => {\r\n                    // as nested flow?\r\n                    let asNestedFlow = action.id.toString().endsWith(strFlowId);\r\n                    if (asNestedFlow) {\r\n                        isUsed = true;\r\n                        logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                        ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logToConsole);\r\n                        ConsoleLog(\"    as nested flow\", logToConsole);\r\n                    } else\r\n                    // or referenced by an action type argument\r\n                    {\r\n                        action.Arguments.forEach(arg => {\r\n                            if (arg.argumentType == \"static.actions\") {\r\n                                let argumentStatic = arg as actionArgumentStaticActions\r\n                                if (argumentStatic.type == \"static.actions\" && argumentStatic.value?.endsWith(strFlowId)) {\r\n                                    isUsed = true;\r\n                                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                                    ConsoleLog(`  Flow : ${flow.name} (id: ${flow.id})`, logToConsole);\r\n                                    ConsoleLog(\"    Action : \" + action.name, logToConsole);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n\r\n            nameSort(page.ActiveElements).forEach(element => {\r\n                let logElement = logToConsole;\r\n                let eventsUsingFlow = element.opts.events.filter(item => { return item.actID && item.actID.toString().endsWith(strFlowId); });\r\n                eventsUsingFlow.forEach(theEvent => {\r\n                    isUsed = true;\r\n                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n\r\n                    logElement = ConsoleLog(\"  Element : \" + element.name, logElement);\r\n                    ConsoleLog(\"    Event : \" + theEvent.code, logToConsole);\r\n                });\r\n            });\r\n\r\n            // Check usage of flow in Page Events (Page Flows and Root Page Flows attributes)\r\n            let inPageEvents = [];\r\n            // Page Flows\r\n            if (page.opts.autoSaveActionID?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Auto-Save Flow\");\r\n            }\r\n            if (page.opts.onLoadAct?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Page Load Flow\");\r\n            }\r\n            // Root Page Flows\r\n            if (page.opts.notConnectedActID?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Flow to run when connection is lost\");\r\n            }\r\n            if (page.opts.reConnectedActID?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Flow to run when connection is re-established\");\r\n            }\r\n            if (page.opts.notAuthenticatedActID?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Flow to run when authentication is lost\");\r\n            }\r\n            if (page.opts.newRevisionActID?.toString().endsWith(strFlowId)) {\r\n                inPageEvents.push(\"Flow to Run When Revision is Out of Date\");\r\n            }\r\n            if (inPageEvents.length > 0) {\r\n                isUsed = true;\r\n                logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                ConsoleLog(\"  Element : Page Body\", logToConsole);\r\n                inPageEvents.forEach(theEvent => {\r\n                    ConsoleLog(\"    Event : \" + theEvent, logToConsole);\r\n                });\r\n            }\r\n\r\n            if (page.opts.resonanceDataListeners) {\r\n                let dataListenersUsingFlow = page.opts.resonanceDataListeners.filter(item => { return item.actID && item.actID.toString().endsWith(strFlowId); });\r\n                if (dataListenersUsingFlow.length > 0) {\r\n                    isUsed = true;\r\n                    logPageName = ConsoleLog(\"Page : \" + page.name, logPageName);\r\n                    ConsoleLog(\"  Element : Page Body\", logToConsole);\r\n                    ConsoleLog(`    Used by ${dataListenersUsingFlow.length} Data Listener(s)`, logToConsole);\r\n                }\r\n            }\r\n        });\r\n        ConsoleLog(\"\", logToConsole);\r\n        ConsoleLog(\"THAT'S IT!\", logToConsole);\r\n\r\n        return isUsed;\r\n    }\r\n\r\n    static findUsageOfDeletedFlows(): void {\r\n        let bildrCache = BildrCacheHelper.createInstance();\r\n        // for easy reference\r\n\r\n        function isDeletedFlow(flowId: actId) {\r\n            return bildrCache.deletedFlows.find(item => item.id.toString().endsWith(flowId.toString())) != undefined;\r\n        }\r\n\r\n        // Check usage of Flow in Actions of Flows as nested flow or referenced by an action type argument\r\n        bildrCache.activeFlows.forEach(flow => {\r\n            if (flow.opts && flow.opts.arguments) {\r\n                let actionsArray = flow.opts.arguments.find(item => { return item.name == \"actionsArray\" });\r\n                if (actionsArray) {\r\n                    let argumentStaticArray = actionsArray as actionArgumentActionsArray\r\n                    argumentStaticArray.value?.forEach(actionRef => {\r\n                        // Nested flow?\r\n                        if (actionRef.id && isDeletedFlow(actionRef.id)) {\r\n                            let page = bildrCache.pages.find(item => { return item.id == flow.formID });\r\n                            if (page) {\r\n                                console.log(`Page : ${page.name}`);\r\n                                console.log(`  Flow : ${flow.name} (id: ${flow.id})`);\r\n                                const deletedFlowName = bildrCache.deletedFlows.find(item => item && item.id.toString().endsWith(actionRef.id.toString()))\r\n                                console.log(\"    as nested flow : \" + deletedFlowName ? deletedFlowName : actionRef.id);\r\n                            }\r\n                        } else {\r\n                            let action = bildrCache.actions.find(item => { return (item.id == actionRef.id) });\r\n\r\n                            if (action && action.opts && action.opts.arguments) {\r\n                                let hasFlowRef = action.opts.arguments.find(arg => {\r\n                                    return (arg.argumentType == \"static.actions\" && (arg as actionArgumentStaticActions).value && isDeletedFlow((arg as actionArgumentStaticActions).value!));\r\n                                })\r\n                                if (hasFlowRef) {\r\n                                    let page = bildrCache.pages.find(item => { return item.id == flow.formID });\r\n                                    if (page) {\r\n                                        console.log(`Page : ${page.name}`);\r\n                                        console.log(`  Flow : ${flow.name} (id: ${flow.id})`);\r\n                                        console.log(`    Action : ${action.name}`);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                };\r\n            };\r\n        });\r\n        // Check usage of flow in Page Events (Page Flows and Root Page Flows attributes)\r\n        bildrCache.activePages.forEach(page => {\r\n            // Flatten active elements because the elements don't get flagged as deleted although \r\n            // they are nog part of the page any more. Checks should only be done on active\r\n            // elements.\r\n            var objsTreeFlattend = Array<element>();\r\n\r\n            function flattenElements(items: element[] | undefined) {\r\n                if (items != undefined) {\r\n                    items.forEach(item => {\r\n                        flattenElements(item.items)\r\n                        objsTreeFlattend.push(item);\r\n                    })\r\n                }\r\n            }\r\n\r\n            flattenElements(page.objsTree);\r\n\r\n            // Check usage of flow in Elements Events\r\n            nameSort(objsTreeFlattend).forEach(element => {\r\n                if (element.opts && element.opts.events) {\r\n                    let eventsUsingFlow = element.opts.events.filter(item => { return item.actID && isDeletedFlow(item.actID) });\r\n                    eventsUsingFlow.forEach(theEvent => {\r\n                        let page = bildrCache.pages.find(item => { return item.id == element.formID });\r\n                        if (page) {\r\n                            console.log(\"Page : \" + page.name);\r\n                            console.log(\"  Element : \" + element.name);\r\n                            console.log(\"    Event : \" + theEvent.code);\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n\r\n            let inPageEvents = []\r\n            if (page.opts) {\r\n                // Page Flows\r\n                if (page.opts.autoSaveActionID && isDeletedFlow(page.opts.autoSaveActionID)) {\r\n                    inPageEvents.push(\"Auto-Save Flow\");\r\n                }\r\n                if (page.opts.onLoadAct && isDeletedFlow(page.opts.onLoadAct)) {\r\n                    inPageEvents.push(\"Page Load Flow\");\r\n                }\r\n                // Root Page Flows\r\n                if (page.opts.notConnectedActID && isDeletedFlow(page.opts.notConnectedActID)) {\r\n                    inPageEvents.push(\"Flow to run when connection is lost\");\r\n                }\r\n                if (page.opts.reConnectedActID && isDeletedFlow(page.opts.reConnectedActID)) {\r\n                    inPageEvents.push(\"Flow to run when connection is re-established\");\r\n                }\r\n                if (page.opts.notAuthenticatedActID && isDeletedFlow(page.opts.notAuthenticatedActID)) {\r\n                    inPageEvents.push(\"Flow to run when authentication is lost\");\r\n                }\r\n                if (page.opts.newRevisionActID && isDeletedFlow(page.opts.newRevisionActID)) {\r\n                    inPageEvents.push(\"Flow to Run When Revision is Out of Date\");\r\n                }\r\n                if (inPageEvents.length > 0) {\r\n                    console.log(\"Page : \" + page.name);\r\n                    console.log(\"  Element : Page Body\");\r\n                    inPageEvents.forEach(theEvent => {\r\n                        console.log(\"    Event : \" + theEvent);\r\n                    })\r\n                }\r\n\r\n                if (page.opts.resonanceDataListeners) {\r\n                    let dataListenersUsingFlow = page.opts.resonanceDataListeners.filter(item => { return item.actID && isDeletedFlow(item.actID) });\r\n                    if (dataListenersUsingFlow.length > 0) {\r\n                        console.log(\"Page : \" + page.name);\r\n                        console.log(\"  Element : Page Body\");\r\n                        console.log(`    Used by ${dataListenersUsingFlow.length} Data Listener(s)`);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        console.log(\"\");\r\n        console.log(\"THAT'S IT!\");\r\n    }\r\n\r\n    static getFlowWithActions(flowId: string): void {\r\n        let cache = BildrCacheHelper.createInstance();\r\n        let flow = cache.activeFlows.find(flow => {\r\n            return (flow.id && flow.id.toString() == flowId);\r\n        });\r\n\r\n        if (flow == undefined) {\r\n            console.log(\"flow not found\");\r\n            return;\r\n        }\r\n\r\n        console.log(\"Flow found:\");\r\n        console.log(flow);\r\n        console.log(\"Actions:\");\r\n\r\n        if (flow.opts && flow.opts.arguments) {\r\n            let actionsArray = flow.opts.arguments.find(item => { return item.name == \"actionsArray\"; });\r\n            if (actionsArray) {\r\n                let argumentActionsArray = actionsArray as actionArgumentActionsArray;\r\n                argumentActionsArray.value?.forEach(actionRef => {\r\n                    // Used in an argument of an action type?\r\n                    let action = cache.actions.find(item => { return (item.id.toString() == actionRef.id.toString()); });\r\n\r\n                    if (action) {\r\n                        console.log(action);\r\n                    }\r\n                })\r\n            };\r\n        }\r\n    }\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","groupBy","list","getKey","reduce","previous","currentItem","group","push","nameSort","sort","a","b","name","localeCompare","ConsoleLog","text","logIt","console","log","CacheItem","execFn","initValue","this","exec","nullDefault","clear","getValue","CacheHelper","cache","register","variableName","find","item","Error","cacheItem","forEach","BildrCacheHelper","myarray","length","bildrCache","bildrDBCacheGet","actions","act","formID","recs","map","ActionHelper","Array","filter","action","type","flw","FlowHelper","elements","forms","frm","PageHelper","actionsTypes","pages","deleted","opts","archived","flows","flow","activeFlows","f","actionTypes","activePages","deletedFlows","activeFlowsGroupedByFormID","actionsGroupedByFormID","activeElements","createInstance","args","BildrDBCacheGet","form","objsTree","id","ActiveFlows","toString","ActiveElements","formObjsTreeFlattend","flattenElements","items","undefined","Page","page","Arguments","arguments","super","Actions","actionsArray","retValue","actArgActionsArray","actRef","BildrToolsActions","static","path","exactMatch","trim","matcher","includes","logPageName","logFlowName","arg","checkVariableOrElementPathUsage","argumentType","filters","fieldsToFilterArray","field","valueToFilterWith","stripTill","indexOf","slice","argVariable","setValue","readValue","handleArgVariable","pageNameLogged","flowNameLogged","thisIsAVariableName","BildrToolsActionTypes","actionTypeId","theActionType","acT","ActionsToShowEnum","BildrToolsDebug","frmsRecursive","brwFrm","brwFrmVars","_vars","cBrwForms","brwFormRoot","breakBeforActionId","window","orgQAFunc","QueueAction","wait","parentQAction","brwObj","params","isThread","qName","addToQueue","showFlows","ActionsToShow","Flows","showActions","showBildrActions","BildrActions","showMouseActions","MouseActions","isMouseEvent","isFlow","indent","_StepMode","constructor","BildrToolsFlows","skipAutoSave","findUsageOfFlow","flowId","logToConsole","strFlowId","isUsed","endsWith","argumentStatic","element","logElement","events","actID","theEvent","code","inPageEvents","autoSaveActionID","onLoadAct","notConnectedActID","reConnectedActID","notAuthenticatedActID","newRevisionActID","resonanceDataListeners","dataListenersUsingFlow","isDeletedFlow","actionRef","deletedFlowName","objsTreeFlattend"],"sourceRoot":""}